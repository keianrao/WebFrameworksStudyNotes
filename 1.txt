[Ember]
- Has dedicated CLI, installed through NPM

- Size of first, blank project is 339MB
	- 388MB is for project-local node_modules. Contains 1002 dependencies
	- Already added in .gitignore. Which is following ember project structure
- `ember server` to spawn a quick web server
- Quick web server has live reload. Reacts to file changes with recompilation
	- "and refreshes any open browser pages." Um, how does it..?
	
- Template file extension is 'hbs'.
- Template file can work just like HTML, except everything is implicitly in a <body> tag (No need to write HTML header, so on).
	- Live reload watches for temporary files as well (~index.hbs).
	
- App templates, code, stylesheets, go into /app.
- Assets go into /public/assets.
	- Files placed in /public can be accessed by the public through URLs.
	- Remember to use /public/assets subdirectory!


[Angular]
- Angular is an entire platform, containing more than a framework.
- It is all TypeScript-based.

- Angular components are typescript classes decorated with @Component().
- In the source code, the decorator is not small (like "@Component(Atom)"),
  rather it is passed a whole JavaScript object. So it will typically be
  multi-line.
  
- Decorator specifies CSS selector. All HTML elements in the template
  matching the selector will be deemed an instance of the component.
- Decorator also specifies template for component, either a filepath or
  inline as a JavaScript string.
- Angular templates are like HTML, except custom tags can be used -
  when they match the CSS selector in the decorator, its contents are
  filled - 'rendering' - using the template in the decorator.
  
- Templates also support dynamic values, variables from the component class.
  When the instance is updated the rendered DOM automatically changes.
- Templates have more features. The resulting syntax makes use of a
  decent amount of special characters..
  
  
- Angular has native support for dependency injection.
  @Injectable({providedIn: 'root'}) registers a class. Then any constructor
  in other classes asking for that type can get injected with an instance.


- Has dedicated CLI.
	- It is implied it is possible to create an Angular appp without it..
	- Can one-time build an app into an output directory.
	- Can spawn a quick web server with live reloading.
	- Can publicly serve an Angular app then run end-to-end tests.
	
- Provides libraries for various common SPA features.
	- Has a library for animations.
	- Has a library for PWAs.
	- Has a library for forms.
	- Has a library for client-server communication.


- Both Ember and Angular are quite noisy about minimum versions.
  Angular CLI refuses to run in Debian's version of Node.js, v10.24.0.
  	- Debian has Angular packaged, but it is a plain library rather than
	  a node module. One has to import /usr/share/javascript/angular.js
	- I can edit Angular versions in package.json, but not sure how the
	  other dependencies will react. No tool to downgrade all, no?
	- Since I cannot build the Angular tutorial locally,
	  for now I will skip it.


[Vue]

- Designed to be incrementally adoptable
	- Vue's core library only deals with (MVC) view layer
	
- Vue's tutorial recommends against starting with vue-cli. They say
  one should be familliar with 'Node.js-based build tools' before trying..

- Vue has a templating language. But rather than needing dedicated files,
  the template code can be placed as plain text contents in a div.
- A Vue "application instance"? is constructed, upon which the templates
  inside the divs are parsed and replaced.
  	- Vue instance constructed with an element locator.
	  CSS selector syntax, like in Ember.
	- And, mappings between data variables in the templates, and
	  their values.
- Without reactivity, this is considered just string templating.
  But with Vue the DOM is now reactive, to data changes in JavaScript.
- For conditional constructs, Vue uses HTML attributes.

- Vue also provides automatic setup of transition effects.
  (But it also supports animation libraries. Apparently there is
  an animation library called 'Animate.css').
