[Ember]
- Has dedicated CLI, installed through NPM

- Size of first, blank project is 339MB
	- 388MB is for project-local node_modules. Contains 1002 dependencies
	- Already added in .gitignore. Which is following ember project structure
- `ember server` to spawn a quick web server
- Quick web server has live reload. Reacts to file changes with recompilation
	- "and refreshes any open browser pages." Um, how does it..?
	
- Template file extension is 'hbs'.
- Template file can work just like HTML, except everything is implicitly in a <body> tag (No need to write HTML header, so on).
	- Live reload watches for temporary files as well (~index.hbs).
	
- App templates, code, stylesheets, go into /app.
- Assets go into /public/assets.
	- Files placed in /public can be accessed by the public through URLs.
	- Remember to use /public/assets subdirectory!

- To setup routers, Router.map called with callback as argument. Callback
  will have 'this' set, which has a 'route' method.
  	- this.route(id) will create route and map it to '/id'.
	- this.route(id, path) will create route and map it to path.
	- templates/id.hbs will automatically be used.
	
- Ember components also come with their own HTML tags to use in templates.
  There are predefined components, such as LinkTo.
  

- Ember CLI has 'generate' subcommand. Following framework conventions, it
  generates files with boilerplate contents.
- One type available for generating is an acceptance test file.
- Acceptance tests uses a few imports to get a workflow going.
	- QUnit's 'module', 'test' functions for the overall test structure,
	  both taking user-defined callbacks. The former's receives "hooks",
	  while the latter's receives an asserter object.
	- Ember provides a (programmatic) website client in '@ember/test-helpers'.
- Acceptance tests, a.k.a. application tests, are described as being a
  programmatic equivalent to testing the user interface.
- Tests are run using a special test environment.
  Which can be run in server form, 'ember test --server'.
  Manually navigating to the page in a browser will begin tests, and
  give the browser a GUI interface showing the results of the tests.
  	- Like 'ember serve', will auto-reload on file change.
	
	
- Ember components can/are used for any reusable code, regardless of size.
  They are also described as 'templates with names'.
- (In Ember,) Component tests are considered integration tests, and
  distinct from acceptance tests. The justification is that, the
  acceptance tests were about entire rendered and navigated pages,
  whereas the component tests are for individual renderings.
  
- I am doing some debugging work right now (regarding Ember's compiled
  templates - do they use the 'handlebars' library?). The test server
  is not very good.
  	- Its stability; I've had to SIGKILL it several times now.
	- If still alive, it has invalid caching (of the tested code).
	- It can give nonsensical error messages (e.g. "hbs should be invoked
	  with at least a single argument" at "let templ = hbs(templb)").

- Adding a single HTML template file in app/components is sufficient for
  then using the component in other templates. So Ember is probably decent
  as a static HTML page engine.
- The special template, 'application.hbs', wraps around all other templates.

- When components are placed in subdirectories, they become namespaced under
  that subdirectory's name. <Subdirectory::Component> - C++ style.
- In component template, '...attributes' can be used. All the attributes
  placed on the component (within other templates) will be passed/copied in.
  
  
- HTML documents/elements that are static, are called "presentational".
  They are markup that present content.


[Angular]
- Angular is an entire platform, containing more than a framework.
- It is all TypeScript-based.

- Angular components are typescript classes decorated with @Component().
- In the source code, the decorator is not small (like "@Component(Atom)"),
  rather it is passed a whole JavaScript object. So it will typically be
  multi-line.
  
- Decorator specifies CSS selector. All HTML elements in the template
  matching the selector will be deemed an instance of the component.
- Decorator also specifies template for component, either a filepath or
  inline as a JavaScript string.
- Angular templates are like HTML, except custom tags can be used -
  when they match the CSS selector in the decorator, its contents are
  filled - 'rendering' - using the template in the decorator.
  
- Templates also support dynamic values, variables from the component class.
  When the instance is updated the rendered DOM automatically changes.
- Templates have more features. The resulting syntax makes use of a
  decent amount of special characters..
  
  
- Angular has native support for dependency injection.
  @Injectable({providedIn: 'root'}) registers a class. Then any constructor
  in other classes asking for that type can get injected with an instance.


- Has dedicated CLI.
	- It is implied it is possible to create an Angular appp without it..
	- Can one-time build an app into an output directory.
	- Can spawn a quick web server with live reloading.
	- Can publicly serve an Angular app then run end-to-end tests.
	
- Provides libraries for various common SPA features.
	- Has a library for animations.
	- Has a library for PWAs.
	- Has a library for forms.
	- Has a library for client-server communication.


- Both Ember and Angular are quite noisy about minimum versions.
  Angular CLI refuses to run in Debian's version of Node.js, v10.24.0.
  	- Debian has Angular packaged, but it is a plain library rather than
	  a node module. One has to import /usr/share/javascript/angular.js
	- I can edit Angular versions in package.json, but not sure how the
	  other dependencies will react. No tool to downgrade all, no?


- *ngFor and *ngIf attributes in HTML templates can handle many tasks.
- Dynamic attributes using [attribute] syntax, e.g. [title].
- Event handling using (event) syntax, e.g. (click).

- Angular components typically in their own folder under app.
- Usually broken out into three files:
	- TypeScript file for definition and methods.
	- HTML file as template (Not a complete HTML document).
	- CSS file for any styles.
	- Should be possible to write these files oneself, rather than
	  use some generator script.
- By convention, Angular selector names have 'app-' prefix.

- @Input() decorator allows accepting a parameter through attributes.
  For example, for '@Input() variable!: Type' in subcomponent definition,
  supercomponent template can have '<subcomponent [variable]="instance">'.
  Friend will then be injected.
  
- @Output() decorator marks events from an EventEmitter as to be sent to
  supercomponent. The variable name will be used as the name of the event.
  Then supercomponent can do '(eventName)="eventHandler()"'.
  
- In entries for RouterModule, path can contain parameters. For example,
  'page/:id'. Then, when a template has an anchor with href to '/page',
  they can pass: '<a [routerLink]="['/page', someObject.id]">'.
- The subcomponent's constructor can then receive an ActivatedRoute argument,
  which contains the mapping, among other things.
- Tutorial says 'subcomponent is now considered configured for using a service'.
- Steps seen for passing data to a new page:
	- Add route definition with ID parameter
	- Supercomponent passes ID through [routerLink] attribute
	- Subcomponent receives ID through ActivatedRoute.snapshot.paramMap,
	  finds the data object itself through its own means
	- Subcomponent renders found data object in template.
	
- A service in Angular is an instance of a class made available to the
  rest of the application through the dependency injection system.
- Unlike components which conventionally go under 'app' and are broken out
  into three files, services are, at least in the tutorial, singular files
  going in the app root.
- A service and a component can have the same name. They are distinguished
  by their type as a suffix: 'name.service', 'name.component'.
  
- In JavaScript frameworks, generally you are working with a 'this' object,
  so working with its properties you must prefix their names with 'this.'.
  Unprefixed variables are assumed to be local variables or global variables.
  
- I think the following applies to any Angular directive..?
  Both 'routerLink=URL' and '[routerLink]="[URL, suffix]"' are valid.
  Note that the latter needs to have the value of an array.
  
- To import an Angular library, first import the module inside app.module.ts.
  The module gives providers of a certain service - these providers are
  registered globally, i.e. available to import, by adding the module
  inside 'imports' inside the argument to @NgModule.
- Angular's HttpClient service has a method #get that eats a URL and
  turns it into a stream of a user-specified kind of object. The simplest
  call is available for JSON files.

- If you get a "Can't bind to 'ngForOf' since it isn't a known property
  of 'div'", or something not being found, check that the component you are
  working in is registered in @NgModule.declarations.
	- In StackBlitz at least, the compile errors are not very helpful.
  
  
[Vue]
- Designed to be incrementally adoptable
	- Vue's core library only deals with (MVC) view layer
	
- Vue's tutorial recommends against starting with vue-cli. They say
  one should be familliar with 'Node.js-based build tools' before trying..

- Vue has a templating language. But rather than needing dedicated files,
  the template code can be placed as plain text contents in a div.
- A Vue "application instance"? is constructed, upon which the templates
  inside the divs are parsed and replaced.
  	- Vue instance constructed with an element locator.
	  CSS selector syntax, like in Ember.
	- And, mappings between data variables in the templates, and
	  their values.
- Without reactivity, this is considered just string templating.
  But with Vue the DOM is now reactive, to data changes in JavaScript.
- For conditional constructs, Vue uses HTML attributes.

- Vue also provides automatic setup of transition effects.
  (But it also supports animation libraries. Apparently there is
  an animation library called 'Animate.css').

- Vue components are pre-defined Vue instances.
	- Exported using the 'Vue.component' function.
- Also results in some custom HTML tag being usable.
  My guess was that perhaps the frameworks are using Web Components..
  But Vue clarifies that it is its own system
- I was confused at why my browser was not throwing errors at the HTML file,
  given it starts off containing an element with an invalid tag. But then
  I just added an element with a genuinely random tag, and the browser
  still did not complain.

- Internally, Vue compiles the templates into Virtual DOM render functions.
  (And it uses its reactivity metadata to re-render as few components as
  needed.) Adept JavaScript programmers can just write and override in
  their own render function, rather than Vue compiling a template.
  
- Templates can have data binded into them.
- Simplest form is text interpolation, {{ variable }}.
	- We saw that this is so common it is basically standard.
	  Apparently this is called "Mustache" syntax.
	- Recall that unlike others, will react to value update.
	- v-once directive (HTML attribute) on enclosing tag to turn off
	  reactivity, just itnerpolate once.
- Text interpolation inserts as plain text. If HTML interpolation intended,
  it's possible. (I won't mention it further)
- Mustache syntax is not a thing for HTML attributes.
  Instead of 'attr="{{ attrVal }}"', do 'v-bind:attr="attrVal"'.
  	- If boolean variable, 'attribute=false' is wrong, defining attribute
	  in the first place sets it as true. So Vue will omit attribute if
	  value in question is a boolean.
	- Similarly, attribute will be omitted if value is nul or undefined.

- For Vue, text interpolation and attribute binding actually accepts
  any JavaScript expression.
- Or rather, all Vue directives (HTML attributes with the 'v-' prefix)
  expect a single JavaScript expression.
  	- Scope is of owning Vue instance.
	- Only one expression is accepted. No statements, no flow controls.
- Expressions, both in text interpolation and directives, are sandboxed!
- There is a whitelist of global object (libraries) to use, but otherwise, 
  negotiate data through the enclosing Vue instance.
- Certain attributes "take an argument" by needing a suffix in their name,
  so they kind of are different attributes. Examples are "v-bind:href",
  "v-on:click".

- In Vue, when an attribute looks like follows:
  'attribute:[expression]="value"', what's in the square brackets is a
  whole JavaScript expression.
  	- I'm not sure if other frameworks follow such a system.
	- These are useful for having programmatically deciding an attribute name.
	- If expression evaluates to null, attribute is removed.
	- If expression evaluates to non-string, a warning is thrown.
	  The result needs to be a valid part of a HTML attribute name.
- Templates written directly in the HTML file are called 'in-DOM templates'.
  Recall that HTML tags and attributes are case-insensitive!
  So if you do 'v-bind:[caseSensitiveName]', it will actually be interpreted
  as lowercase, and mystery arises as it binds to 'casesensitivename'.

- Directives can have modifiers, suffixes starting with a dot.
  "v-on:submit.prevent" for example. (.prevent tells v-on to call
  preventDefault() first on event.)
  
- For the convenience of SPA writers (where the whole site is Vue), and
  programmers that hate verbosity, v-bind and v-on get special shorthands.
- For 'v-bind:attribute', "v-bind" can be omitted, ':attribute' will be
  deemed a v-bind.
- For 'v-on:event', "v-on" can be replaced by '@', '@click'.

- In-template expressions are really meant for data binding, they're not
  places to write code, even when it's possible. Declarative files
  (in this case, a page template) should not contain logic.
- In Vue instance (in JavaScript code), add 'computed'. A JavaScript object
  mapping variable names to functions that compute their value. Basically,
  getters.
- (Vue docs say that people from AngularJS like to use watch to recompute
  a value upon change of another value, rather than use computed properties)
- One can use either computed properties (in 'computed') or methods (in
  'methods'). Aside from not needing to call computed properties like a
  function ('v-bind:attr=computedProperty', not 'computedProperty()'),
  computed properties are aware of their reactive dependencies, and will
  automatically cache the last computation, recomputing only when the
  dependencies change.
- One can also use watchers, in 'watch', called when a property changes.
  They're said to be good for launching async operations and imperatively
  making internal changes.

- It seems like present JavaScript programmers edit CSS classes a lot to
  make visual changes.
- In Vue, class bindings ('v-bind:class') and style bindings, have
  special parsing to make things easier.
  
- For class bindings:
	- An object can be thrown in, mapping class names to values or, 
	  to boolean data properties, to toggle those classes.
      ':class="{ highlight: wasLastSelected }"'
	- Or an array can be thrown in, containing data property names, and
      those data properties' values will be used as the classes.
	- Or, esoterically, have an object inside the array as well.
	- Tutorial recommends trying these with computed properties,
	  resulting in entirely reactive class assignments.

- Also, v-bind:class will append, not override, the usual HTML class attribute.
- Similarly, if you are using Vue components, if you add a 'class=' or
  'v-bind:class=' to the component tag, it will append to whatever classes
  the component had internally set for itself.
  
- For style bindings, it's like CSS, except of course it wouldn't have CSS's
  lack of variables - one can use data properties.
  	- Normally style bindings are an object, but one can throw in an array
	  of style objects, which will merge all of them.
	- Also, one may feel free to use newer CSS properties as they please -
	  Vue will automatically add vendor prefixes if needed. 
	- One can also give a CSS property an array as a value - it will pick
	  the last value in the array that the browser supports (back to front).
